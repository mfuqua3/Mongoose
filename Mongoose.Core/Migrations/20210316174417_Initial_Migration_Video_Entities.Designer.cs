// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mongoose.Core;

namespace Mongoose.Core.Migrations
{
    [DbContext(typeof(MongooseContext))]
    [Migration("20210316174417_Initial_Migration_Video_Entities")]
    partial class Initial_Migration_Video_Entities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mongoose.Core.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("EpisodeNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.VideoInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeId1")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FilmId")
                        .HasColumnType("int");

                    b.Property<int?>("FilmId1")
                        .HasColumnType("int");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId")
                        .IsUnique()
                        .HasFilter("[EpisodeId] IS NOT NULL");

                    b.HasIndex("EpisodeId1")
                        .IsUnique()
                        .HasFilter("[EpisodeId1] IS NOT NULL");

                    b.HasIndex("FilePath")
                        .IsUnique()
                        .HasFilter("[FilePath] IS NOT NULL");

                    b.HasIndex("FilmId")
                        .IsUnique()
                        .HasFilter("[FilmId] IS NOT NULL");

                    b.HasIndex("FilmId1")
                        .IsUnique()
                        .HasFilter("[FilmId1] IS NOT NULL");

                    b.ToTable("VideoInfo");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Episode", b =>
                {
                    b.HasOne("Mongoose.Core.Entities.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Season", b =>
                {
                    b.HasOne("Mongoose.Core.Entities.Series", "Series")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.VideoInfo", b =>
                {
                    b.HasOne("Mongoose.Core.Entities.Episode", "Episode")
                        .WithOne()
                        .HasForeignKey("Mongoose.Core.Entities.VideoInfo", "EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mongoose.Core.Entities.Episode", null)
                        .WithOne("VideoInfo")
                        .HasForeignKey("Mongoose.Core.Entities.VideoInfo", "EpisodeId1");

                    b.HasOne("Mongoose.Core.Entities.Film", "Film")
                        .WithOne()
                        .HasForeignKey("Mongoose.Core.Entities.VideoInfo", "FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mongoose.Core.Entities.Film", null)
                        .WithOne("VideoInfo")
                        .HasForeignKey("Mongoose.Core.Entities.VideoInfo", "FilmId1");

                    b.Navigation("Episode");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Episode", b =>
                {
                    b.Navigation("VideoInfo");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Film", b =>
                {
                    b.Navigation("VideoInfo");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("Mongoose.Core.Entities.Series", b =>
                {
                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
